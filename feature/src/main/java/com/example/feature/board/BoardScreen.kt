// BoardScreen.kt
package com.example.feature.board

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.core.ui.R
import com.example.core.ui.theme.SpotTypography
import com.example.core.ui.theme.B500
import com.example.core.ui.theme.G300
import com.example.core.ui.theme.White
import com.example.core.ui.shapes.SpotShapes
import com.example.core.ui.component.appBar.AppBarHome

/** Ï†ïÎ†¨ ÌÉ≠ ÌÉÄÏûÖ */
enum class SortType { LIVE, RECOMMEND, COMMENTS }

/** Í∏∞Î≥∏ Î≥¥Îìú ÏïÑÏù¥ÌÖú (Îû≠ÌÅ¨ Î¶¨Ïä§Ìä∏ÏóêÏÑú ÏÇ¨Ïö©) */
data class BoardItem(
    val id: String,
    val title: String,
    val count: Int
)

/** ÎùºÎ≤®Ïù¥ ÏûàÎäî Î≥¥Îìú ÏïÑÏù¥ÌÖú (ÌååÌä∏ÎÑàÎì§ Ïù¥ÏïºÍ∏∞ ÏÑπÏÖòÏóêÏÑú ÏÇ¨Ïö©) */
data class LabeledItem(
    val id: String,
    val label: String,
    val title: String,
    val count: Int
)

@Composable
fun BoardScreen(
    onItemClick: (BoardItem) -> Unit = {},
    onLabeledItemClick: (LabeledItem) -> Unit = {},
    onMorePartnersClick: () -> Unit = {},
    onMoreNoticeClick: () -> Unit = {},
) {
    var selected by remember { mutableStateOf(SortType.LIVE) }

    // ÎØ∏Î¶¨Î≥¥Í∏∞/ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ (Ïã§ÏÇ¨Ïö© Ïãú VMÏúºÎ°ú ÍµêÏ≤¥)
    val hot = remember {
        List(5) { i ->
            BoardItem(id = "hot$i", title = "Lorem ipsum dolor sit amet consectetur‚Ä¶", count = listOf(10, 100, 9999, 10, 10)[i])
        }
    }
    val partners = remember {
        listOf(
            LabeledItem("p1", "Ìï©Í≤©ÌõÑÍ∏∞", "Lorem ipsum dolor sit amet consectetur‚Ä¶", 10),
            LabeledItem("p2", "Ï†ïÎ≥¥Í≥µÏú†", "Lorem ipsum dolor sit amet consectetur‚Ä¶", 100),
            LabeledItem("p3", "Í≥†ÎØºÏÉÅÎã¥", "Lorem ipsum dolor sit amet consectetur‚Ä¶", 9999),
            LabeledItem("p4", "Ï∑®Ï§ÄÌÜ†ÌÅ¨", "Lorem ipsum dolor sit amet consectetur‚Ä¶", 10),
            LabeledItem("p5", "ÏûêÏú†ÌÜ†ÌÅ¨", "Lorem ipsum dolor sit amet consectetur‚Ä¶", 10),
        )
    }
    val notice = remember {
        List(5) { i ->
            BoardItem(id = "n$i", title = "Lorem ipsum dolor sit amet consectetur‚Ä¶", count = listOf(10, 100, 1100, 10, 10)[i])
        }
    }

    Scaffold(
        topBar = {
            AppBarHome(
                hasNotification = false,
                onSearchClick = { /* TODO */ },
                onNotificationClick = { /* TODO */ }
            )
        }
    ) { inner ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(inner)
                .padding(horizontal = 14.dp),
            verticalArrangement = Arrangement.spacedBy(18.dp),
            contentPadding = PaddingValues(bottom = 88.dp)
        ) {

            /* üî• + ÌÉ≠(Ïö∞Ï∏°Ï†ïÎ†¨) */
            item {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 30.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Image(
                        painter = painterResource(R.drawable.fire),
                        contentDescription = null,
                        modifier = Modifier
                            .size(22.dp)
                            .padding(end = 6.dp)
                    )
                    Spacer(Modifier.weight(1f))
                    BoardTabs(
                        selected = selected,
                        onSelect = { selected = it }
                    )
                }
            }

            /* Ïã§ÏãúÍ∞Ñ Ïù∏Í∏∞Í∏Ä Ïπ¥Îìú (Îû≠ÌÅ¨ Î¶¨Ïä§Ìä∏) */
            item {
                RankCardList(
                    items = hot,
                    onItemClick = onItemClick
                )
            }

            /* Ïä§ÌÑ∞Îîî ÌååÌä∏ÎÑàÎì§Ïùò Ïù¥ÏïºÍ∏∞ (ÏÑπÏÖò Ìó§Îçî + ÎùºÎ≤® Î¶¨Ïä§Ìä∏) */
            item {
                SectionHeader(
                    title = "Ïä§ÌÑ∞Îîî ÌååÌä∏ÎÑàÎì§Ïùò Ïù¥ÏïºÍ∏∞",
                    onMoreClick = onMorePartnersClick
                )
            }
            item {
                LabeledCardList(
                    items = partners,
                    onItemClick = onLabeledItemClick
                )
            }

            /* SPOT Í≥µÏßÄ (ÏÑπÏÖò Ìó§Îçî + Îû≠ÌÅ¨ Î¶¨Ïä§Ìä∏) */
            item {
                SectionHeader(
                    title = "SPOT Í≥µÏßÄ",
                    onMoreClick = onMoreNoticeClick
                )
            }
            item {
                RankCardList(
                    items = notice,
                    onItemClick = onItemClick
                )
            }
        }
    }
}

/* ---------- Ïª¥Ìè¨ÎÑåÌä∏Îì§ ---------- */

@Composable
private fun BoardTabChip(
    text: String,
    selected: Boolean,
    onClick: () -> Unit,
) {
    val bg = if (selected) B500.copy(alpha = 0.12f) else Color.Transparent
    val fg = if (selected) B500 else Color(0xFF666B73)

    Box(
        modifier = Modifier
            .clip(SpotShapes.Round)
            .background(bg)
            .clickable(onClick = onClick)
            .padding(horizontal = 10.dp, vertical = 4.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = text,
            style = SpotTypography.bodySmall500.copy(fontSize = 13.sp),
            color = fg
        )
    }
}


@Composable
private fun BoardTabs(
    selected: SortType,
    onSelect: (SortType) -> Unit
) {
    Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
        BoardTabChip(
            text = "Ïã§ÏãúÍ∞Ñ",
            selected = selected == SortType.LIVE,
            onClick = { onSelect(SortType.LIVE) }
        )
        BoardTabChip(
            text = "Ï∂îÏ≤úÏàú",
            selected = selected == SortType.RECOMMEND,
            onClick = { onSelect(SortType.RECOMMEND) }
        )
        BoardTabChip(
            text = "ÎåìÍ∏ÄÏàú",
            selected = selected == SortType.COMMENTS,
            onClick = { onSelect(SortType.COMMENTS) }
        )
    }
}

/** Í≥µÌÜµ ÏÑπÏÖò Ìó§Îçî (Ï†úÎ™© + >) */
@Composable
private fun SectionHeader(
    title: String,
    onMoreClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 2.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = title,
            style = SpotTypography.bodyMedium500.copy(fontSize = 18.sp),
            modifier = Modifier.weight(1f)
        )
        IconButton(onClick = onMoreClick, modifier = Modifier.size(32.dp)) {
            Icon(
                painter = painterResource(R.drawable.arrow_right),
                contentDescription = "ÎçîÎ≥¥Í∏∞",
                tint = B500
            )
        }
    }
}

/** Îû≠ÌÅ¨ Ïπ¥Îìú Î¶¨Ïä§Ìä∏ (BoardSection Ï∞∏Í≥†Ìï¥ÏÑú ÎèôÏùº Ïä§ÌÉÄÏùº) */
@Composable
private fun RankCardList(
    items: List<BoardItem>,
    onItemClick: (BoardItem) -> Unit
) {
    Surface(
        shape = SpotShapes.Hard,
        color = White,
        tonalElevation = 0.dp,
        shadowElevation = 0.dp,
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(modifier = Modifier.padding(vertical = 6.dp)) {
            items.forEachIndexed { index, item ->
                RankRow(
                    rank = index + 1,
                    title = item.title,
                    count = item.count,
                    onClick = {
                        /* Ìï¥Îãπ Í≤åÏãúÍ∏ÄÎ°ú Ïù¥Îì± */
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 12.dp, vertical = 10.dp)
                )
            }
        }
    }
}

/** ÎùºÎ≤®Ïù¥ ÏûàÎäî Î¶¨Ïä§Ìä∏ (ÌååÌä∏ÎÑàÎì§ Ïù¥ÏïºÍ∏∞) */
@Composable
private fun LabeledCardList(
    items: List<LabeledItem>,
    onItemClick: (LabeledItem) -> Unit
) {
    Surface(
        shape = SpotShapes.Hard,
        color = White,
        tonalElevation = 0.dp,
        shadowElevation = 0.dp,
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(modifier = Modifier.padding(vertical = 6.dp)) {
            items.forEachIndexed { index, item ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(horizontal = 12.dp, vertical = 10.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // ÏôºÏ™Ω ÎùºÎ≤®
                    Text(
                        text = item.label,
                        style = SpotTypography.bodySmall500.copy(fontSize = 14.sp),
                        color = B500,
                        modifier = Modifier.widthIn(min = 56.dp)
                    )
                    // Ï†úÎ™©
                    Text(
                        text = item.title,
                        style = SpotTypography.bodyMedium500.copy(fontSize = 14.sp),
                        maxLines = 1,
                        overflow = TextOverflow.Ellipsis,
                        modifier = Modifier.weight(1f)
                    )
                    // Ïπ¥Ïö¥Ìä∏
                    Text(
                        text = "(${cap(item.count)})",
                        style = SpotTypography.bodySmall500.copy(fontSize = 14.sp),
                        color = B500
                    )
                }

                if (index != items.lastIndex) {
                    HorizontalDivider(
                        color = G300,
                        thickness = 0.5.dp,
                        modifier = Modifier.padding(horizontal = 12.dp)
                    )
                }
            }
        }
    }
}

/** 999+ Ìè¨Îß∑ */
private fun cap(n: Int): String = if (n >= 1000) "999+" else n.toString()

/* ---------- Îû≠ÌÅ¨ Ìñâ (Ïù¥ÎØ∏ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÏûàÏúºÎ©¥ Í∑∏Í±∏ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî) ---------- */
@Composable
private fun RankRow(
    rank: Int,
    title: String,
    count: Int,
    modifier: Modifier = Modifier,
    onClick: () -> Unit,
) {
    Row(
        modifier = modifier,
        verticalAlignment = Alignment.CenterVertically,

    ) {
        Text(
            text = rank.toString().padStart(2, '0'),
            style = SpotTypography.bodySmall500.copy(fontSize = 14.sp),
            color = B500,
            modifier = Modifier.width(28.dp)
        )
        Text(
            text = title,
            style = SpotTypography.bodyMedium500.copy(fontSize = 14.sp),
            maxLines = 1,
            overflow = TextOverflow.Ellipsis,
            modifier = Modifier.weight(1f)
        )
        Text(
            text = "(${cap(count)})",
            style = SpotTypography.bodySmall500.copy(fontSize = 14.sp),
            color = B500
        )
    }
}

